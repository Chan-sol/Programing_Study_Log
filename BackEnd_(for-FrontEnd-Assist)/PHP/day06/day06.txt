Ajax(Asynchronous JavaScript And XML)
    웹 페이지 전체를 다시 로딩하지 않고 백그라운드 영역에서 서버와 통신하여
    그 결과를 리턴받고 웹 페이지의 일부분을 갱신할 수 있게 하는 기술
    
    빠르게 동작하는 웹 페이지를 만들기 위한 개발 기법

    서버와 데이터를 주고 받을 수 있는데, 이 때 대표적인 데이터는
    JSON, XML, HTML, 텍스트 등이 있다.

    ex. 로그인, 비밀번호 일치 불일치 / 실시간 검색어 (실시간 검색어는 실시간 채팅과 달리 주기가 길어서 가능)

Ajax 장점
    웹 페이지 전체를 다시 로드하지 않아도 일부분만을 갱신할 수 있음
    웹 페이지가 완전히 로드된 후에 서버로 데이터 요청을 보낼 수 있음
    다양한 UI(동적 페이지)를 구현할 수 있음
    페이지 이동 없이 백그라운드 영역에서 서버로 데이터를 전송할 수 있음

Ajax 단점
    페이지 이동이 없기 때문에 히스토리 관리가 안됨
    바이너리 데이터를 전달할 수 없음
    서버 푸싱 방식의 실시간 서비스를 만들 수 없음 
    
    서버 푸싱 방식 ex. 카카오톡 대화
        카톡을 보내는 사람 입장에서는 '보내기' 버튼을 통해서 요청을 해서 해당 채팅창 DB에 저장을 했던 것이고
        카톡을 받는 사람은 서버 푸싱 방식을 이용해서 (메시지를 달라는 요청을 하지 않아도 / 서버에서 강제로 전달)
        실시간으로 답장을 받으며 채팅을 이어갈 수 있음

Ajax의 구성요소
    웹 페이지의 표현을 위한 HTML, CSS
    데이터의 교환을 위한 JSON, XML, 텍스트, ...
    웹 서버와의 비동기식 통신을 위한 XMLHttpRequest 객체
    통신 결과를 통해 화면 구성을 동적으로 조작하기 위한 DOM 모델

XMLHttpRequest 객체
    Ajax의 가장 핵심적인 구성요소는 바로 XMLHttpRequest 객체이다.
    이 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용된다.
    웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은
    바로 xhr 객체를 사용하기 때문이다.
    
XMLHttpRequest 객체 생성
    const 객체명 = new XMLHttpRequest();
    const xhr = new XMLHttpRequest();

XMLHttpRequest 객체의 readyState 프로퍼티 상태 값
    값이 변화될 때마다 onreadystatechange가 호출됨

    1. UNSET (숫자 0)
        XMLHttpRequest 객체가 생성되었을 때의 상태값
        (xhr.readyState = XMLHttpRequest.UNSET) // 0이 대입됨

    2. OPENED (1)
        xhr 객체의 open() 메소드가 성공적으로 실행되었을 때의 상태값

    3. HEADERS_RECEIVED (2)
        모든 요청에 대한 응답이 도착했을 때의 상태값 // 우리가 요청 보낸 게 서버 쪽에 잘 도착했다는 뜻

    4. LOADING (3)
        요청한 데이터를 처리중일 때의 상태값

    5. DONE (4)
        요청한 데이터의 처리가 완료되어 응답할 준비가 완료됐을 때의 상태값

open()
    서버로 보낼 Ajax 요청의 형식을 설정
    open("전송방식", "URL 주소", 동기여부);
    동기여부 : true(비동기), false(동기)

send()
    작성된 Ajax 요청을 서버로 전송






